#define left_motor_forward 3
#define left_motor_backward 4
#define right_motor_forward 7
#define right_motor_backward 8
#define left_motor_speed 5
#define right_motor_speed 6
#define head_light 13
#define spl 25 //left motor speed coeficient
#define spr 25 //right motor speed coeficient
char flag = 's';



int s[6]; //this is for storing analog value of each sensor
int thresould[] = {512, 512, 512, 512, 512, 512}; //this is the mid value for each sensor. use this array if you want to adjust midoint of each sensor individually
int base[6] = {1, 2, 4, 8, 16, 32}; //this is for binary to decimal conversion
int sensor; //this is to store final value after binary conversion
int sum = 0; //this is to store the count of detected sensor

void setup() {
  pinMode(left_motor_forward, OUTPUT);
  pinMode(left_motor_backward, OUTPUT);
  pinMode(left_motor_speed, OUTPUT);
  pinMode(right_motor_forward, OUTPUT);
  pinMode(right_motor_backward, OUTPUT);
  pinMode(right_motor_speed, OUTPUT);
  pinMode(head_light, OUTPUT);
  Serial.begin(9600);
}

void loop() {
  //  bluetooth(); //uncomment this if you want to use it as a rc car. comment this if you want to folow the line
  line_follow(); // comment this if you want to test sensor value or want to use robot a rc car
  //  show_the_value(); // only uncomment this if you need to test sensor value in serial monitor
  //  motor(10 * spl, 10 * spr);  //only uncomment this when you need to test if robot is moving forward
}

void reading() {
  sensor = 0; //this is to refresh initial value
  sum = 0;
  for (int i = 0 ; i < 6 ; i++) {
    s[i] = analogRead(i);
    (s[i] > 410) ? s[i] = 1 : s[i] = 0; //conditional statement. this is to convert analog value to digital. if you want to see real analog value, then comment it. but for line follow, you must uncomment it.
    sensor += s[i] * base[i]; //this is to merge all 6 values and imagine them in a single binary number. then i converted it into decimal number to use as final value. better search about base convertion
    sum += s[i]; //finds out total count of sensor
  }
}

void show_the_value() {
  reading();
  for (int i = 5 ; i >= 0 ; i--)
    Serial.print(String(s[i], 10) + " ");
  Serial.println(sensor);
}

void motor(int a, int b){
  if(a>=0){
    digitalWrite(left_motor_forward, 1);
    digitalWrite(left_motor_backward, 0);
  }
  else{
    a=-a;
    digitalWrite(left_motor_forward, 0);
    digitalWrite(left_motor_backward, 1);
  }
  if(b>=0){
    digitalWrite(right_motor_forward, 1);
    digitalWrite(right_motor_backward, 0);
  }
  else{
    b=-b;
    digitalWrite(right_motor_forward, 0);
    digitalWrite(right_motor_backward, 1);
  }
  analogWrite(left_motor_speed,a);
  analogWrite(right_motor_speed,b);
}

void line_follow() {
  while (1) { //infinite loop
    reading();
    if (sum == 0) {
      if (flag != 's') {
        motor(10 * spl, 10 * spr);
        delay(30); //time given to move robot forward for a certain time to adjust itself in 90 degree line to have a perfect turn
        if (flag == 'l') {
          motor(-6 * spl, 6 * spr);
          while (s[2] == 0 && s[3] == 0) reading(); //robot will continue turning untill any of two middle ir sensors find black line
        }
        else if (flag == 'r') {
          motor(6 * spl, -6 * spr);
          while (s[2] == 0 && s[3] == 0) reading();
        }
        flag = 's'; //when you are done turning robot, make the flag to its normal state so that robot wont turn on its own when it finds no line without detecting 90degree logic
      }
    }
    else if (sum == 1 || sum == 2) {  //only for straight line
      if (sensor == 0b001100) motor(10 * spl, 10 * spr);
      //right side portion
      else if (sensor == 0b000100) motor(10 * spl, 9 * spr);
      else if (sensor == 0b000110) motor(10 * spl, 6 * spr);
      else if (sensor == 0b000010) motor(10 * spl, 3 * spr);
      else if (sensor == 0b000011) motor(10 * spl, 0 * spr);
      else if (sensor == 0b000001) motor(10 * spl, -3 * spr);
      //left side portion
      else if (sensor == 0b001000) motor(9 * spl, 10 * spr);
      else if (sensor == 0b011000) motor(6 * spl, 10 * spr);
      else if (sensor == 0b010000) motor(3 * spl, 10 * spr);
      else if (sensor == 0b110000) motor(0 * spl, 10 * spr);
      else if (sensor == 0b100000) motor(-3 * spl, 10 * spr);
    }

    else if (sum == 3 || sum == 4 || sum == 5) { //only for sharp turn logic
      if (sensor == 0b111100 || sensor == 0b111000 || sensor == 0b111110) flag = 'l';
      else if (sensor == 0b001111 || sensor == 0b000111 || sensor == 0b011111) flag = 'r';
    }
  }
}

void bluetooth() {
  int s = 10; //for adjustable speed system
  char x; //for storing receiving incoming data  
  
  while (1) { //infinite loop
    if (Serial.available() > 0) {
      x = Serial.read();
      Serial.println(x);
      
      if (x == 'F') motor(s * spl, s * spr);
      else if (x == 'B') motor(-s * spl, -s * spr);
      else if (x == 'L') motor(-s * spl, s * spr);
      else if (x == 'R') motor(s * spl, -s * spr);
      else if (x == 'G') motor(0, s * spr);
      else if (x == 'I') motor(s * spl, 0);
      else if (x == 'H') motor(0, -s * spr);
      else if (x == 'J') motor(-s * spl, 0);
      else if (x == 'S') motor(0, 0);
      else if (x == 'U') digitalWrite(head_light, HIGH);
      else if (x == 'u') digitalWrite(head_light, LOW);
      else if (x == '0') s = 0;
      else if (x == '1') s = 1;
      else if (x == '2') s = 2;
      else if (x == '3') s = 3;
      else if (x == '4') s = 4;
      else if (x == '5') s = 5;
      else if (x == '6') s = 6;
      else if (x == '7') s = 7;
      else if (x == '8') s = 8;
      else if (x == '9') s = 9;
      else if (x == 'q') s = 10;
    }
  }
}
